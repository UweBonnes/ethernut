#! /bin/sh

if [ "x`uname`" != "xLinux" ]
then
	echo "This is not a Linux system. I'm so confused!"
	exit 1
fi

# Ask user which device to target

unset DEV

while [ "x$DEV" = "x" ]
do
	echo "Select a target device:"
	echo ""
	echo "  1) Atmel ATmega128"
	echo "  2) Atmel ATmega103"
	echo "  3) Renesas H8/3068F"
#	echo "  4) Renesas H8/3069F" # just an example
#	echo "  5) Renesas H8S/2676F" # just an example
#	echo "  6) OKI ML67Q5003" # just an example
	echo ""
	echo -n "Selection -> "
	read answ

	case "$answ" in
	1) DEV=atmega128; ARCH=avr ;;
	2) DEV=atmega103; ARCH=avr ;;
	3) DEV=H8/3068F; ARCH=h8300h ;;
#	4) DEV=H8/3069F; ARCH=h8300h ;; # just an example
#	5) DEV=H8S/2676F; ARCH=h8300s ;; # just an example
#	6) DEV=ML67Q5003; ARCH=arm ;; # just an example
	*)
		echo "invalid choice" ;;
	esac
done

# Set up environment for AVR microcontrollers

if [ "$ARCH" = "avr" ]; then

    # Verify that avr-gcc is in the users PATH

    if ! avr-gcc --version >/dev/null 2>&1
    then
	    echo "Can't find avr-gcc. :-("
	    echo ""
	    echo "This could mean either of the following:"
	    echo "  1: You don't have avr-gcc installed."
	    echo "  2: You don't have your PATH environment variable set right."
	    echo "Here is your PATH variable:"
	    echo ""
	    echo $PATH
	    echo ""
	    exit 1
    fi

    # Make links to included make fragments

    [ -f Makedefs ]  || ln -s Makedefs.gcc Makedefs
    [ -f Makerules ] || ln -s Makerules.gcc Makerules

    [ -f app/Makedefs ]  || ln -s Makedefs.gcc app/Makedefs
    [ -f app/Makerules ] || ln -s Makerules.gcc app/Makerules

    # Ask which isp programmer is being used

    unset UISP_PROG
    while [ "x$UISP_PROG" = "x" ]
    do
	    echo "Which isp programmer are you using?"
	    echo ""
	    echo "  1) stk200, stk300 or compatible"
	    echo "  2) skt500"
	    echo ""
	    echo -n "Selection -> "
	    read answ

	    case "$answ" in
	    1) UISP_PROG=stk200 ;;
	    2) UISP_PROG=stk500 ;;
	    *)
		    echo "invalid choice" ;;
	    esac
    done

    # Generate the config file

    cat <<EOF > UserConf.mk
MCU=$DEV
ARCH=$ARCH
HWDEF=-D__HARVARD_ARCH__
BURN=uisp
BURNFLAGS=-dprog=$UISP_PROG --erase --upload --verify if=\$(TARG)
CRUROM = \$(top_srcdir)/tools/crurom/crurom
EOF

    echo "Your system is now configured to build for $DEV."
    echo "Type \`make\` to build the system."

    exit 0

fi

# Set up environment for H8/300H and H8S  microcontrollers

if [ "$ARCH" = "h8300h" -o "$ARCH" = "h8300s" ]; then

    # Verify if h8300-elf-gcc is in the users PATH

    if ! h8300-elf-gcc --version >/dev/null 2>&1
    then
	    echo "Can't find H8 gcc. :-("
	    echo ""
	    echo "This could mean either of the following:"
	    echo "  1: You don't have H8 gcc installed. Go to http://www.kpitgnutools.com"
	    echo "  2: You don't have your PATH environment variable set right."
	    echo "Here is your PATH variable:"
	    echo ""
	    echo $PATH
    	    echo ""
	    exit 1
    fi

    # Set up device dependant compiler flags

    if [ "$ARCH" = "h8300h" ]; then
	# flags for H8/300H micros
	MCUOPTS="-mh -mint32"
    else
	# flags for H8S micros
	MCUOPTS="-ms -mint32"
    fi
    
    # Setup paths to libc and libgcc for linker

    GCCVER=`h8300-elf-gcc --version|grep h8300-elf-gcc|cut -d ' ' -f 3`
    GCCDIR=`dirname \`which h8300-elf-gcc\``
    LIBGCCDIR="lib/gcc-lib/h8300-elf/$GCCVER/$ARCH"
    LIBCDIR="h8300-elf/lib/$ARCH"
    LDDIRS="-L $GCCDIR/../$LIBGCCDIR -L $GCCDIR/../$LIBCDIR"

    # Select whether code is to be executed from ROM or RAM

    CODEMEM="rom"
    unset RUNFLAG
    echo "Ethernut code can be run from RAM. This is useful when you are"
    echo "debugging your application. Remember that your hardware must"
    echo "have enough RAM to store data and program code."
    echo ""
    echo -n "Should Ethernut be executed from RAM (default=No)? Y(es)/N(o) "
    read answ

    if [ "$answ" = "y" -o "$answ" = "Y" ]; then
	RUNFLAG="-DTEXT_IN_RAM"
	CODEMEM="ram"
    fi
    echo ""

    # Choose appropriate linker script

    case "$DEV" in
	# H8/300H micros
	H8/3068F) LDSCRIPT=nut-h8-3068f-$CODEMEM.ld ;;
	H8/3069F) LDSCRIPT=nut-h8-3069f-$CODEMEM.ld ;; # just an example

	# H8S micros
	H8S/2676F) LDSCRIPT=nut-h8s-2676f-$CODEMEM.ld ;; # just an example
    esac

    # Make links to included make fragments

    [ -f Makedefs ]  || ln -s Makedefs.h8-gcc Makedefs
    [ -f Makerules ] || ln -s Makerules.h8-gcc Makerules

    [ -f app/Makedefs ]  || ln -s Makedefs.h8-gcc app/Makedefs
    [ -f app/Makerules ] || ln -s Makerules.h8-gcc app/Makerules

    # Generate config file
    cat <<EOF > UserConf.mk
DEVICE=$DEV # for future use
MCU=$ARCH
ARCH=$ARCH
MCUOPTS=$MCUOPTS
RUNFLAG=$RUNFLAG
LDSCRIPT=\$(top_srcdir)/arch/$ARCH/ldscripts/$LDSCRIPT
LDDIRS=$LDDIRS
BURN=h8write
BURNFLAGS=-3068 \$(TARG)
CRUROM = \$(top_srcdir)/tools/crurom/crurom
EOF

    echo "Your system is now configured to build for $DEV."
    echo "Type \`make\` to build the system."

    exit 0
fi

# Set up environment for ARM  microcontrollers

if [ "$ARCH" = "arm" ]; then

    # Verify if arm-elf-gcc is in the users PATH

    if ! h8300-elf-gcc --version >/dev/null 2>&1
    then
	    echo "Can't find ARM gcc. :-("
	    echo ""
	    echo "This could mean either of the following:"
	    echo "  1: You don't have ARM gcc installed. Go to http://armoid.com/gnuarm"
	    echo "  2: You don't have your PATH environment variable set right."
	    echo "Here is your PATH variable:"
	    echo ""
	    echo $PATH
    	    echo ""
	    exit 1
    fi

    # Set up device dependant compiler flags

#    if [ "$ARCH" = "h8300h" ]; then
#	# flags for H8/300H micros
#	MCUOPTS="-mh -mint32"
#    else
#	# flags for H8S micros
#	MCUOPTS="-ms -mint32"
#    fi
    MCUOPTS="-mcpu=arm7tdmi"
    
    # Setup paths to libc and libgcc for linker

#    GCCVER=`arm-elf-gcc --version|grep arm-elf-gcc|cut -d ' ' -f 3`
#    GCCDIR=`dirname \`which arm-elf-gcc\``
#    LIBGCCDIR="lib/gcc-lib/arm-elf/$GCCVER/$ARCH"
#    LIBCDIR="arm-elf/lib/$ARCH"
#    LDDIRS="-L $GCCDIR/../$LIBGCCDIR -L $GCCDIR/../$LIBCDIR"

    # Select whether code is to be executed from ROM or RAM

    CODEMEM="rom"
    unset RUNFLAG
    echo "Ethernut code can be run from RAM. This is useful when you are"
    echo "debugging your application. Remember that your hardware must"
    echo "have enough RAM to store data and program code."
    echo ""
    echo -n "Should Ethernut be executed from RAM (default=No)? Y(es)/N(o) "
    read answ

    if [ "$answ" = "y" -o "$answ" = "Y" ]; then
	RUNFLAG="-DTEXT_IN_RAM"
	CODEMEM="ram"
    fi
    echo ""

    # Choose appropriate linker script

    case "$DEV" in
	ML67Q5003) LDSCRIPT=nut-arm-ml67q5003-$CODEMEM.ld ;;
    esac

    # Make links to included make fragments

    [ -f Makedefs ]  || ln -s Makedefs.arm-gcc Makedefs
    [ -f Makerules ] || ln -s Makerules.arm-gcc Makerules

    [ -f app/Makedefs ]  || ln -s Makedefs.arm-gcc app/Makedefs
    [ -f app/Makerules ] || ln -s Makerules.arm-gcc app/Makerules

    # Generate config file
    cat <<EOF > UserConf.mk
DEVICE=$DEV # for future use
MCU=$ARCH
ARCH=$ARCH
MCUOPTS=$MCUOPTS
RUNFLAG=$RUNFLAG
LDSCRIPT=\$(top_srcdir)/arch/$ARCH/ldscripts/$LDSCRIPT
#LDDIRS=$LDDIRS
#BURN=h8write
#BURNFLAGS=\$(TARG)
CRUROM = \$(top_srcdir)/crurom/crurom
EOF

    echo "Your system is now configured to build for $DEV."
    echo "Type \`make\` to build the system."

    exit 0
fi
